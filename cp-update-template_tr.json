{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template S3_Website_Bucket_With_Retain_On_Delete: Sample template showing how to create a publicly accessible S3 bucket configured for website access with a deletion policy of retail on delete. **WARNING** This template creates an S3 bucket that will NOT be deleted when the stack is deleted. You will be billed for the AWS resources used if you create a stack from this template. *** AWS CloudFormation Sample Template S3_Website_Bucket_With_Retain_On_Delete: Sample template showing how to create a publicly accessible S3 bucket configured for website access with a deletion policy of retail on delete. **WARNING** This template creates an S3 bucket that will NOT be deleted when the stack is deleted. You will be billed for the AWS resources used if you create a stack from this template.",


  "Parameters": {
    "ReadCapacityUnits": {
      "Description": "Provisioned read throughput",
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "10000",
      "ConstraintDescription": "must be between 5 and 10000"
    },

    "WriteCapacityUnits": {
      "Description": "Provisioned write throughput",
      "Type": "Number",
      "Default": "10",
      "MinValue": "5",
      "MaxValue": "10000",
      "ConstraintDescription": "must be between 5 and 10000"
    }
  },

  "Transform": {
      "Name" : "AWS::Serverless-2016-10-31",
      "Resources" : {
          "LambdaOne": {
              "Type" : "AWS::Serverless::Function",
              "Properties" : {
                  "CodeUri" : "/lambda/",
                  "Handler" : myLambda.lambda_handler,
                  "Runtime" : python2.7,
              }
          }
      }
  },

  "Resources" : {

    "LambdaOneRole": {
      "Type": "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": { "Fn::GetAtt" : ["AmazonS3FullAccess", "Arn"] },
      }
    },

    "S3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "PublicRead",
        "BucketName" : "cp-update-stack-s3",
        "NotificationConfiguration" : {
          "LambdaConfigurations" : [{
            "Function" : { "Ref" : "LambdaOne" },
            "Event" : "s3:ObjectCreated:*",
          }]
        },
        "WebsiteConfiguration" : {
          "IndexDocument" : "index.html",
          "ErrorDocument" : "error.html"      
         }
      },
      "DeletionPolicy" : "Retain"
    },

    "TableOfBooks": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          { "AttributeName": "Title", "AttributeType": "S" },
          { "AttributeName": "Category", "AttributeType": "S" },
          { "AttributeName": "Language", "AttributeType": "S" }
        ],
        "KeySchema": [
          { "AttributeName": "Category", "KeyType": "HASH" },
          { "AttributeName": "Title", "KeyType": "RANGE" }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
          "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
        },
        "LocalSecondaryIndexes": [ {
          "IndexName": "LanguageIndex",
          "KeySchema": [
            { "AttributeName": "Category", "KeyType": "HASH" },
            { "AttributeName": "Language", "KeyType": "RANGE" }
          ],
          "Projection": {
            "ProjectionType": "KEYS_ONLY"
          }
        } ],
        "GlobalSecondaryIndexes": [ {
          "IndexName": "TitleIndex",
          "KeySchema": [
            { "AttributeName": "Title", "KeyType": "HASH" }
          ],
          "Projection": {
            "ProjectionType": "KEYS_ONLY"
          },
          "ProvisionedThroughput": {
            "ReadCapacityUnits": { "Ref": "ReadCapacityUnits" },
            "WriteCapacityUnits": { "Ref": "WriteCapacityUnits" }
          }
        } ]
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::GetAtt" : [ "S3Bucket", "WebsiteURL" ] },
      "Description" : "URL for website hosted on S3"
    },
    "S3BucketSecureURL" : {
      "Value" : { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt" : [ "S3Bucket", "DomainName" ] } ] ] },
      "Description" : "Name of S3 bucket to hold website content"
    },

     "TableName" : {
       "Value" : {"Ref" : "TableOfBooks"},
       "Description" : "Name of the newly created DynamoDB table"
     }
  }
}
